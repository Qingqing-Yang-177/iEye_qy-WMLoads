function [ii_data,ii_cfg] = ii_rescale(ii_data,ii_cfg,chan,resolution,ppd,fixation)
%II_RESCALE Rescales a channel(s) (e.g., pix to dva)
%   Used for converting 'raw' gaze coordinates into the coordinate system
%   used to present stimuli. Required:
%   CHAN: channel name, or list of channel names (cell), to adjust
%      default: {'X', 'Y'}
%   RESOLUTION: # pixels wide, high
%      default: [1280 1024]
%   PPD: if a pixels per degree (ppd) ratio is provided with 'ppd'
%        parameter, all channels within CHAN are adjusted by this amount
%        after shifting by RESOLUTION/2 (in absence of fix_pos)
%   SCREEN_PARAMS: structure with fields .view_dist and .screen_width (in
%   same units, irrelevant what they are). PPD will be computed given
%   these.
%      default: .view_dist = 56; .screen_width = ????
%   
% OPTIONAL:
%   FIX_POS: position, in pixels, of fixation point (defaults to
%   resolution/2)
%   
% Tommy Sprague, 8/11/2017


narginchk(5,5);




% interpret params
p = inputParser;
default_resolution = [1280 1024];
default_scr_params.view_dist = 56;
default_scr_params.screen_width = 40;
default_chan = {'X','Y'};
default_ppd = 34.1445;

%expected_chan = fieldnames(ii_data); % can't use a channel that doesn't exist...

addParameter(p,'resolution',default_resolution,@isnumeric);
addParameter(p,'fixation',@isnumeric);

addParameter(p,'ppd',default_ppd,@isnumeric);
addParameter(p,'screen_params',default_scr_params,@isstruct);

p.StructExpand = 0;

parse(p,varargin{:});

%chan = p.Results.chan;

if ~iscell(chan)
    chan = {chan};
end



return